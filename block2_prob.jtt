app.numPeriods = app.session.decisionSituations.length;
app.groupSize = 1;
// Disable automatic modification of "src" attributes, instead the full path is pre-specified. Automation does not work with dynamic values yet.
app.modifyPathsToIncludeId = false;

let stage = app.newStage('hello');
stage.playerStart = function(player) {
    let sit = player.period().id-1;
    let situation = app.session.decisionSituations[player.participant.decSitSequence[sit]];
    player.situation = situation;
    player.situationName = situation.name;
    player.slider = -1;
    if (player.period().id === 1) {
        player.participant.latestPayoffs = [];
    }
}
stage.activeScreen = `
<p>There are two options: option A and option B which you see below. If this question is selected for payout, a lottery will determine which of the two options you get. You can now determine the probability with which each option is selected in this lottery. If you choose 0, option A has 0% probability of being selected and option B has a 100% probability of being selected in the lottery. If you choose 100, option A has a 100% probability of being selected and option B has a 0% probability of being selected. If you choose 70, option A has a 70% probability of being selected and option B has a 30% probability of being selected, and so on. You can adjust the slider or enter values in either of the two fields.</p>
<div style='display: flex; width: 100%'>
    <img :src='"14anita/images/" + player.situation.optionA.filename'>
    <span style='flex: 1 0 400px'></span>
    <img :src='"14anita/images/" + player.situation.optionB.filename'>
</div>

<div style='display: flex; width: 100%'>
    <span style='flex: 0 0 200px'><b>Option A</b></span>
    <span style='flex: 1 0 400px'></span>
    <span style='flex: 0 0 200px; text-align: right'><span><b>Option B</b></span>
</div>
<div style='width: 80%; padding-left: 10%; padding-right: 10%'>
    <input 
        id="slider" 
        type="range" 
        name='player.slider' 
        min="0" 
        max="100" 
        step="1" 
        oninput="showSliderVal(this.value)" 
        onchange="showSliderVal(this.value)"
        style='width: 100%;'>
</div>
<div style='display: flex; width: 100%'>
    <span style='width: 70px'>
        <input 
            id='optionAInput' 
            type='number' 
            min='0' 
            max='100' 
            step='1' 
            onchange="showSliderVal(this.value)"
        >
    </span>
    <span style='flex: 1 1 500px'></span>
    <span style='width: 70px'>
        <input 
            id='optionBInput' 
            type='number' 
            min='0' 
            max='100' 
            step='1' 
            onchange="showSliderVal(100-this.value)"
        >
    </span>
</div>
<div style='width: 100%; display: flex; justify-content: center'>
<button :disabled='player.slider == -1'>OK</button>
</div>
<script>
let s = document.createElement("style");
document.head.appendChild(s);
showSliderVal = function(val) {
    s.textContent = \`
#slider::-webkit-slider-thumb{
    max-width: 20px
}
input[type=range]::-moz-range-thumb {
    width: 10px;
}
\`;
    $("#optionAInput").val(val);
    let x = val;
    let y = 100-x;
    $("#optionBInput").val(y);
    document.getElementById('slider').value = val;
    jt.vue.player.slider = val;
}

jt.connected = function() {
    jt.socket.on('playerUpdate', function(player) {
        s.textContent = '';
    });
}
</script>
<style>
input[type=range]::-webkit-slider-thumb {
    max-width: 0px;
}
input[type=range]::-moz-range-thumb {
    border: none;
    width: 0px;
}
body {
    max-width: unset;
}
#jtree {
    width: 90%;
}
</style>
`

stage.autoplay = `
    if (jt.vue.player.slider == -1) {
        let x = Math.floor(Math.random()*101);
        showSliderVal(x);
    } else {
        $('form').submit();
    }
`

stage.playerEnd = function(player) {
    player.draw = Math.random()*100;
    if (player.draw <= player.slider) {
        player.payoff = player.situation.optionA.text;
    } else {
        player.payoff = player.situation.optionB.text;
    }

    player.participant.latestPayoffs.push(player.payoff);
    if (player.period().id == app.numPeriods) {
        let round = Utils.randomInt(0, app.numPeriods);
        let drawnPayoff = player.participant.latestPayoffs[round];
        player.participant.payoffs.push({
            round: round, 
            payoff: drawnPayoff,
            block: 'Block 2 Prob.'
        });
    }
}
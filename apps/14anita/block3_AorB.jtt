app.isStandaloneApp = false;
app.numPeriods = app.session.repsForBlock3*app.session.decisionSituations.length;
app.groupSize = 1;
app.optionsDelay = 3000;
app.okDelay = 0;

// Disable automatic modification of "src" attributes, instead the full path is pre-specified. Automation does not work with dynamic values yet.
app.modifyPathsToIncludeId = false;

app.html = `
<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv='Content-Type' content='text/html; charset=utf-8'>
        <meta name="viewport" content="width=device-width, initial-scale=1">
    </head>
    <body class='hidden'>
        <div id='jtree'>
            <span v-show='player.status=="playing"'>
                {{stages}}
            </span>
            <span v-show='["ready", "waiting", "finished", "done"].includes(player.status)'>
                {{waiting-screens}}
            </span>
        </div>
        {{scripts}}
    </body>
</html>
`;

app.initPlayer = function(player) {
    let sit = Math.floor((player.period().id-1)/app.session.repsForBlock3);
    let participant = player.participant;
    let situation = app.session.decisionSituations[participant.decSitSequence[sit]];
    player.situation = situation;
    player.situationName = situation.name;
    if (participant.decSitABSeq[sit] == 'AB') {
        player.left = player.situation.optionA;
        player.right = player.situation.optionB;
        player.left.letter = 'A';
        player.right.letter = 'B';
    } else {
        player.left = player.situation.optionB;
        player.right = player.situation.optionA;
        player.left.letter = 'B';
        player.right.letter = 'A';
    }
    player.leftText = player.left.text;
    player.rightText = player.right.text;
    player.selectedOption = -1;
    player.selectedOptionLetter = -1;
    player.selectedOptionFilename = 'none';
    player.selectedOptionDescription = 'none';

    if (player.period().id % app.session.repsForBlock3 === 1) {
        if (player.participant.block3Payoffs == null) {
            player.participant.block3Payoffs = [];
        }
        player.participant.block3Payoffs.push([]);
    }

    player.curPeriod = player.period().id - Math.floor((player.period().id-1) / app.session.repsForBlock3)*app.session.repsForBlock3;
    player.allowOK = false;
}

let intro = app.newStage('intro');
intro.activeScreen = `
    <p>Please click OK to proceed to the next round of the experiment.</p>
`;
intro.canPlayerParticipate = function(player) {
    app.initPlayer(player);
    if (player.period().id % app.session.repsForBlock3 === 1) {
        return true;
    } else {
        return false;
    }
}

let stage = app.newStage('decide');
stage.playerEnd = function(player) {
    player.participant.block3Payoffs[player.participant.block3Payoffs.length-1].push({
        text: player.selectedOption,
        letter: player.selectedOptionLetter,
        filename: player.selectedOptionFilename,
        description: player.selectedOptionDescription,
    });
}

stage.activeScreen = `
<p>{{ app.periodText }}: {{player.curPeriod}}/{{app.session.repsForBlock3}}</p>

<p v-show='player.curPeriod==1'>In this round you will choose between the same option A and option B {{app.session.repsForBlock3}} times in a row.  Note that there are no right or wrong answers for any of the questions.</p>
<p v-show='player.curPeriod==1'>If this round is selected for payout, one of the {{app.session.repsForBlock3}} questions will be randomly selected and you will be paid out according to your choice.</p>
<p>There are two options: option A and option B which you see below (each option is {{player.situation.descAB}}). Which option do you prefer?</p>
<p>Please select option A or option B and click OK.</p>
<div style='display: flex; align-items: center; font-size: 24pt'>
    <div style='flex: 1 0 auto; display: flex; align-items: center; flex-direction: column; justify-content: center; position: relative'>
        <div class='blocker'></div>
        <img class='choice' :src='"14anita/images/" + player.left.filename' width=600 onclick='selectOption(this)' 
            :data-optiontext='player.left.text' 
            data-optionletter='A'
            :data-optionfilename='player.left.filename'
            :data-optiondesc='player.left.description'
        >
        Option A
    </div>
    <div style='width: 100px'></div>
    <div style='flex: 1 0 auto; display: flex; align-items: center; flex-direction: column; justify-content: center; position: relative'>
        <div class='blocker'></div>
        <img class='choice' :src='"14anita/images/" + player.right.filename' width=600 onclick='selectOption(this)' 
            :data-optiontext='player.right.text' 
            data-optionletter='B'
            :data-optionfilename='player.right.filename'
            :data-optiondesc='player.right.description'
        >
        Option B
    </div>
    <input id='choice' style='z-index: -10; position: absolute' name='player.selectedOption'>
    <input id='choiceLetter' style='z-index: -10; position: absolute' name='player.selectedOptionLetter'>
    <input id='choiceFilename' style='z-index: -10; position: absolute' name='player.selectedOptionFilename'>
    <input id='choiceDescription' style='z-index: -10; position: absolute' name='player.selectedOptionDescription'>
</div>
<div style='margin-top: 6rem; height: 2rem; text-align: center'>
    <button tabindex='-1' v-show='(player.selectedOption != -1) && (player.allowOK)'>OK</button>
</div>
<script>
jt.connected = function() {
    jt.socket.on('playerUpdate', function(player) {
        let inputs = $('input');
        for (let i=0; i<inputs.length; i++) {
            inputs[i].onpaste = function(e) {
                e.preventDefault();
            }
        }
        player = JSON.parse(player);
        if (player.stage.id === "intro") {
            return;
        }

        clearTimeout(jt.okTimer);
        jt.okTimer = undefined;
        clearTimeout(jt.selectTimer);
        jt.selectTimer = undefined;

        jt.allowSelect = false;
        player.allowOK = false;

        $('body').css('display', 'flex');
        $('.blocker').removeClass('hidden');
        console.log('allow select timer started');
        jt.selectTimer = setTimeout(function() {
            console.log('allow select timer ended');
            $('.choice').addClass('selectable');
            $('.blocker').addClass('hidden');
            jt.allowSelect = true;
        },
        player.stage.app.optionsDelay);

        $('img').removeClass('selected');
    });
}
selectOption = function(el) {
    if (!jt.allowSelect) {
        return;
    }
    console.log('option selected');
    jt.vue.player.selectedOption = el.dataset.optiontext;
    jt.vue.player.selectedOptionLetter = el.dataset.optionletter;
    jt.vue.player.selectedOptionFilename = el.dataset.optionfilename;
    jt.vue.player.selectedOptionDescription = el.dataset.optiondesc;

    $('img').removeClass('selected');
    el.classList.add('selected');
    document.getElementById('choice').value = jt.vue.player.selectedOption;
    document.getElementById('choiceLetter').value = jt.vue.player.selectedOptionLetter;
    document.getElementById('choiceFilename').value = jt.vue.player.selectedOptionFilename;
    document.getElementById('choiceDescription').value = jt.vue.player.selectedOptionDescription;


    if (!jt.vue.player.allowOK && jt.okTimer == null) {
        console.log('allow ok timer started');
        jt.okTimer = setTimeout(function() {
            console.log('allow ok timer ended');
            jt.vue.player.allowOK = true;
        },
        jt.vue.player.stage.app.okDelay);
    }
}
</script>
<style>
img {
    border: 4px solid transparent;
    position: relative;
}
.blocker {
    position: absolute;
    z-index: 100;
    background-color: rgba(255, 255, 255, 0.5);
    width: 100%;
    height: 100%;
}
.hidden {
    display: none;
}
.selectable:hover {
    cursor: pointer;
    border: 4px solid rgba(0, 0, 255, 0.5);
}
.selected {
    border: 4px solid blue;
}
.selected:hover {
    border: 4px solid blue;
}
#jtree {
    min-width: unset;
}
body {
    max-width: unset;
}
</style>
` 

stage.autoplay = `
    jt.allowSelect = true;
    jt.vue.player.allowOK = true;
    if (jt.vue.player.selectedOption == -1) {
        Vue.nextTick(function() {
            selectOption($('img')[Math.random() < 0.5 ? 0 : 1]);
        });
    } else {
        jt.endStage();
    }
`;

let results = app.newStage('results');
results.addOKButtonIfNone = false;
results.clientDuration = 1;
results.activeScreen = `
<p>You chose:</p>
<div style='display: flex; align-items: center; font-size: 24pt'>
    <div style='flex: 1 0 auto; display: flex; align-items: center; flex-direction: column; justify-content: center; position: relative'>
        <img :src='"14anita/images/" + player.selectedOptionFilename' width=600>
        Option {{ player.selectedOptionLetter }}
    </div>
</div>
`;


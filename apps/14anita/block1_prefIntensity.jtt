app.isStandaloneApp = false;
app.numPeriods = app.session.decisionSituations.length * 2;
app.groupSize = 1;

// Disable automatic modification of "src" attributes, instead the full path is pre-specified. Automation does not work with dynamic values yet.
app.modifyPathsToIncludeId = false;

let stage = app.newStage('decide');
stage.playerStart = function(player) {
    let sit = Math.floor((player.period().id-1)/2);
    let situation = app.session.decisionSituations[player.participant.decSitSequence[sit]];
    player.situation = situation;
    player.situationName = situation.name;
    let storeNext = false;
    if (player.participant.useA == null) {
        player.participant.useA = Math.random() < 0.5;
        storeNext = true;
    } 
    player.option = player.participant.useA ? situation.optionA : situation.optionB;
    player.optionText = player.option.text;
    player.optionDesc = player.option.description;
    player.participant.useA = !player.participant.useA;
    if (!storeNext) {
        player.participant.useA = null;
    }
    player.switchRow = '';
    if (player.period().id === 1) {
        player.participant.block1Payoffs = [];
    }
}
stage.activeScreen = `
    <p>
Below you can see a list of 200 questions. In each question you pick either Option A ({{player.optionDesc}}) or Option B (amount of tokens). At the end of the experiment, if this decision situation is chosen for payout, the computer will randomly pick one question from the list and pay you the option you chose on that one question. Each question is equally likely to be chosen for payment. If you lie on any question, if that question gets chosen for
payment, you will end up with the option you like less, so, <u>in your own interest, you should answer each question truthfully</u>.
    </p>
    <p>
The researchers conducting this experiment assume that you will choose Option A in at least the first few questions, but at some point switch to choosing Option B. So, to save time, please tell us at which token value you would switch. We can then "fill out" your answers to all 200 questions based on your switch point (choosing option A for all options before your switch point, and Option B for all questions at or after your switch point). We will still draw one question randomly for payment.
    </p>
    <img v-show='player.situation.showImageForPrefInt' :src='"14anita/images/" + player.option.filename'>
    <br><br>
    <table>
        <tr style='background-color: #AAA'>
            <th>Question</th>
            <th></th>
            <th>Option A</th>
            <th></th>
            <th>Option B</th>
        </tr>
        <tr v-for='key in [1, 2, 3, "&#8942;", 198, 199, 200]'>
            <td v-html="key"></td>
            <td>{{key === "&#8942;" ? "&#8942;" : "Would you rather have:"}}</td>
            <td>{{key === "&#8942;" ? "&#8942;" : player.option.text}}</td>
            <td>{{key === "&#8942;" ? "&#8942;" : "or"}}</td>
            <td 
                :style='key === "&#8942;" ? "" : "text-align: left"'
            >
                {{
                    key === "&#8942;" ? "&#8942;" : (
                        key + (key === 1 ? " token" : " tokens") + player.situation.prefIntText
                    )
                }}
            </td>
        </tr>
    </table>
    <br>
    <div>
        At which token value would you switch from Option A to Option B? 
        <input 
            type='text' 
            required 
            name='player.switchRow' 
            pattern='^([01]?[0-9]?[0-9]|200)' 
            style='width: 64px' 
            onchange="showSwitchVal(this.value)"
            onkeyup="showSwitchVal(this.value)"
            v-on:keydown.enter.prevent
            tabindex='-1'
            id='switchRow'
        > 
        tokens
    </div>
    <br>
    <button 
        tabindex='-1' 
        :disabled='!(player.switchRow != "" && player.switchRow >= 1 && player.switchRow <= 200)'
    >
        OK
    </button>
    <script>
    showSwitchVal = function(val) {
        if (val.trim != null) {
            val = val.trim();
        }
        if (val == '') {
            val = -1;
        }
        if (Math.floor(val) != val) {
            val = -1;
        }
        jt.vue.player.switchRow = val;
        if (val != -1) {
            $('#switchRow').val(val);
        }
    }
jt.connected = function() {
    jt.socket.on('playerUpdate', function(player) {
        let inputs = $('input');
        for (let i=0; i<inputs.length; i++) {
            inputs[i].onpaste = function(e) {
                e.preventDefault();
            }
        }
    });
}
    </script>
    <style>
        body {
            max-width: 1000px;
        }
        table {
            border-spacing: 0px;
            border-collapse: collapse;
            font-size: inherit;
        }
        table, th, td {
            border: 1px solid black;
        }
        th, td {
            padding: 12px;
            padding-top: 4px;
            padding-bottom: 4px;
        }
        td {
            text-align: center;
        }
    </style>
`
stage.playerEnd = function(player) {
    player.draw = Math.floor(Math.random()*(201));
    if (player.draw > player.switchRow) {
        player.payoff = {
            text: Math.floor(player.draw) + ' tokens'
        };
    } else {
        player.payoff = player.option;
    }

    player.participant.block1Payoffs.push(player.payoff);
}

stage.autoplay = `
    if (jt.vue.player.switchRow == '') {
        let x = Math.floor(Math.random()*(200+1));
        showSwitchVal(x);
    } else {
        jt.endStage();
    }
`
app.isStandaloneApp = false;
app.groupSize = 1;
app.optionsDelay = 2000;
app.okDelay = 2000;

// Disable automatic modification of "src" attributes, instead the full path is pre-specified. Automation does not work with dynamic values yet.
app.modifyPathsToIncludeId = false;

// app.duration = 180;

app.s1questions = [
    {
        text: "If you enter 100, what is the probability that your payoff is over 100 tokens?",
        answer: "50"
    },
    {
        text: "If you enter 20, what is the probability with which Option B is selected?",
        answer: "80"
    },
    {
        text: "If you enter 0, what is the probability that the payoff from the selected lottery is 90 tokens?",
        answer: "50"
    },
    {
        text: "If you enter 0, what is the probability that the payoff from the selected lottery is 50 tokens?",
        answer: "50"
    },  
];
app.s2questions = [
    {
        text: "If you value option A at 52 tokens, you should enter 52.",
        answer: "true"
    }, 
    {
        text: "If you prefer Option A to 22 tokens, you should enter 44.",
        answer: "false"
    }, 
    {
        text: "If you value Option A at 99 tokens, you should enter 110.",
        answer: "false"
    },
];

app.html = `
<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv='Content-Type' content='text/html; charset=utf-8'>
        <meta name="viewport" content="width=device-width, initial-scale=1">
    </head>
    <body class='hidden'>
        <div id='jtree'>
            <span v-show='player.status=="playing"'>
                {{stages}}
            </span>
            <span v-show='["ready", "waiting", "finished", "done"].includes(player.status)'>
                {{waiting-screens}}
            </span>
        </div>
        {{scripts}}
        <style>
        .haserror {
            color: red;
        }
        </style>
        <script>
            function checkAnswers(screenId) {
                Vue.set(jt.vue.player, "hasErrors", false);
                for (let i in jt.vue.app[screenId + "questions"]) {
                    let q = jt.vue.app[screenId + "questions"][i];
                    if (screenId === 's1') {
                        let el = document.getElementById(screenId + 'q' + i);
                        q.selection = el.value;
                        Vue.set(q, 'hasError', false);
                        if (q.selection != q.answer) {
                            // q.hasError = true;
                            jt.vue.player.hasErrors = true;
                        }
                    } else if (screenId === 's2') {
                        let radios = document.getElementsByName(screenId + 'q' + i);
                        q.selection = '';
                        for (let j in radios) {
                            if (radios[j].checked) {
                                q.selection = radios[j].value;
                                break;
                            }
                        }
                        Vue.set(q, 'hasError', false);
                        if (q.selection != q.answer) {
                            q.hasError = true;
                            jt.vue.player.hasErrors = true;
                        }
                    }
                }
                if (!jt.vue.player.hasErrors) {
                    jt.popupMessage('All of your answers are correct.');
                    if (jt.vue.player.correctFirstTry[screenId] == null) {
                        jt.vue.player.correctFirstTry[screenId] = true;
                    }
                } else {
                    jt.vue.player.correctFirstTry[screenId] = false;
                }
            }
            prepScreen3 = function() {
                let player = jt.vue.player;
                    
                clearTimeout(jt.okTimer);
                jt.okTimer = undefined;
                clearTimeout(jt.selectTimer);
                jt.selectTimer = undefined;
                jt.allowSelect = false;
                player.allowOK = false;
        
                $('.blocker').removeClass('hidden');
                console.log('allow select timer started');
                jt.selectTimer = setTimeout(function() {
                    console.log('allow select timer ended');
                    $('.choice').addClass('selectable');
                    $('.blocker').addClass('hidden');
                    jt.allowSelect = true;
                },
                player.stage.app.optionsDelay);
        
                $('img').removeClass('selected');

            }
            gotoScreen = function(id) {
                Vue.delete(jt.vue.player, 'hasErrors');
                jt.vue.player.stage.id = id;
                $('body').find(':input').removeAttr('checked').not(':button, :submit, :reset, :radio, :checkbox').val('');
                if (id === "screen3") {
                    prepScreen3();
                }
                if (id === "s3Results") {
                    setTimeout(endS3Results, 1000);
                }
            }
            endS3Results = function() {
                if (jt.vue.player.curPeriod === jt.vue.app.numRepsScreen3) {
                    jt.vue.player.curPeriod = 1;
                    gotoScreen("screen4");
                } else {
                    jt.vue.player.curPeriod++;
                    prepScreen3();
                    gotoScreen("screen3");
                }
            }
            showSwitchVal = function(val) {
                if (val.trim != null) {
                    val = val.trim();
                }
                if (val == '') {
                    val = -1;
                }
                if (Math.floor(val) != val) {
                    val = -1;
                }
                Vue.set(jt.vue.player, 'switchRow', val);
                if (val != -1) {
                    $('#switchRow').val(val);
                }
            }
            jt.connected = function() {
                jt.socket.on('playerUpdate', function(player) {
                    let inputs = $('input');
                    for (let i=0; i<inputs.length; i++) {
                        inputs[i].onpaste = function(e) {
                            e.preventDefault();
                        }
                    }

                    $('body').css('display', 'flex');
                    
                });
            }
        </script>
        <style>
            body {
                max-width: 1000px;
            }
            table {
                border-spacing: 0px;
                border-collapse: collapse;
                font-size: inherit;
            }
            table, th, td {
                border: 1px solid black;
            }
            th, td {
                padding: 12px;
                padding-top: 4px;
                padding-bottom: 4px;
            }
            td {
                text-align: center;
            }
        </style>
        <style>
            img {
                border: 4px solid transparent;
                position: relative;
            }
            .blocker {
                position: absolute;
                z-index: 100;
                background-color: rgba(255, 255, 255, 0.5);
                width: 100%;
                height: 100%;
            }
            .hidden {
                display: none;
            }
            .selectable:hover {
                cursor: pointer;
                border: 4px solid rgba(0, 0, 255, 0.5);
            }
            img.selected {
                border: 4px solid blue;
            }
            img.selected:hover {
                border: 4px solid blue;
            }
            #jtree {
                min-width: unset;
            }
            body {
                max-width: unset;
            }
        </style>
    </body>
</html>
`;

let intro = app.newStage('intro');
intro.playerStart = function(player) {
    player.allowOK = false;
    player.curPeriod = 1;
    player.correctFirstTry = { s1: null, s2: null};
}

intro.activeScreen = `
<div style='max-width: 800px'>
<p>You will now start the training phase.</p>

<p>The purpose of the training phase it to familiarize yourself with the
different types of questions in the experiment. You can click through
the questions as often as you like.</p>

<p>Of those participants who complete the comprehension questions correctly <u>on the first try</u>, one participant will be randomly selected and paid an additional 5 Euro at the end of this session.</p>

<p>If you have any questions during the training phase, please raise your
hand and an experimenter will come to you.</p>
<p>Click OK to continue.</p>
</div>
`;

let screen1 = app.newStage('screen1');
screen1.activeScreen = `
<div style='max-width: 1400px'>
<p>There are two options: option A and option B which you see below (each option is a lottery with 4 potential outcomes, each outcome being equally likely). If this question is selected for payout, a lottery will determine which of the two options you get. You can now determine the probability with which each option is selected in this lottery.</p>

<p>For example:</p>

<p v-for='x in [0, 100, 70]'>
    If you choose <b>{{x}}, option A</b> has <b>{{x}}% probability of being selected</b> and <b>option B</b> has a <b>{{100-x}}% probability of being selected</b> in the decision-lottery<span v-if='x == 70'>, and so on</span>.
</p>

<p><b>Please enter your preferred probability for Option A in the decision-lottery in the field below.</b></p>

<p><b>Before you do that, please answer the following comprehension questions:</b></p>

<div 
    v-for='(question, index) in app.s1questions' 
    style='display: flex; margin-bottom: 0.5rem;'
    :class='{ haserror: question.hasError }'
>
    <span style='width: 800px'>{{question.text}}</span>
    <span style='margin-right: 1.2rem;'>
        <input type='number' :id='"s1q" + index' min=0 max=100>%
    </span>
</div>

<div class='haserror' id='errorMsg' v-show='player.hasErrors'>Please read the instructions again and check your answers.</div>

<button type='button' onclick='checkAnswers("s1")'>Check answers</button>

<p><b>You can now enter your (hypothetically) preferred probability for Option A in the decision-lottery in the field below.</b></p>

<div style='display: flex; width: 100%; font-size: 18pt; margin-bottom: 2rem'>
    <span style='flex: 1 0 500px; display: flex; flex-direction: column; align-items: center;'>
        <img src='14anita/images/trainingA.jpg'>
        <span><b>Option A</b></span>
        <span style='display: flex'>
            <span>will be selected with&nbsp;</span>
            <input 
                name='player.slider'
                id='optionAInput' 
                pattern='^([0]?[0-9]?[0-9]|100)'
                onchange="showSliderVal(this.value)"
                onkeyup="showSliderVal(this.value)"
                style='display: inline !important; width: 72px'
                v-on:keydown.enter.prevent
                tabindex='-1'
            >
            <span>% probability in the lottery</span>
        </span>
    </span>
    <span style='flex: 1 1 200px'></span>
    <span style='flex: 1 0 500px; display: flex; flex-direction: column; align-items: center;'>
        <img src='14anita/images/trainingB.jpg'>
        <span><b>Option B</b></span>
        <span>
            will be selected with
            {{(player.slider >= 0 && player.slider <= 100) ? (100 - player.slider) : '-'}}%
            probability in the lottery
        </span>
    </span>
</div>

<div style='width: 100%; display: flex; justify-content: center'>
    <button type='button' onclick='gotoScreen("screen2")' :disabled='!(player.slider >= 0 && player.slider <= 100) || player.hasErrors == null || player.hasErrors'>OK</button>
</div>

</div>

<script>
showSliderVal = function(val) {
    if (val.trim != null) {
        val = val.trim();
    }
    if (val == '') {
        val = -1;
    }
    if (Math.floor(val) != val) {
        val = -1;
    }
    Vue.set(jt.vue.player, 'slider', val);
    if (val != -1) {
        $('#optionAInput').val(val);
    }
}
</script>
`;

let screen2 = app.newStage('screen2');
screen2.activeScreen = `
<div style='max-width: 1000px'>
<p>
Below you can see a list of 200 questions where each question is one row. For convenience we only list the first 3 and the last 3 of the 200 questions. As you can see, the <b>questions differ in the amount of token Option B offers</b>.</p>

<p>
In each question you will pick either Option A (a lottery with 4 potential outcomes, each outcome being
equally likely) or Option B (amount of tokens).
</p>

<p>
In the real experiment, if a decision situation with this question format is chosen for payout, the computer
will randomly pick one of the 200 questions from the list and pay you the option you chose on that one
question. Each question will be equally likely to be chosen for payment. If you lie on any question, if that
question gets chosen for payment, you will end up with the option you like less, so, <u>in your own interest,
you should answer each question truthfully</u>.
</p>

<p>
The researchers conducting this experiment assume that you would choose Option A in at least the first
few questions, but at some point switch to choosing Option B. So, to save time, please tell us at which
token value of Option B you would switch. We can then "fill out" your answers to all 200 questions based
on your switch point (choosing option A for all options before your switch point, and Option B for all
questions at or after your switch point).
</p>

    <table>
        <tr style='background-color: #AAA'>
            <th>Question</th>
            <th></th>
            <th>Option A</th>
            <th></th>
            <th>Option B</th>
        </tr>
        <tr v-for='key in [1, 2, 3, "&#8942;", 198, 199, 200]'>
            <td v-html="key"></td>
            <td>{{key === "&#8942;" ? "&#8942;" : "Would you rather have:"}}</td>
            <td>{{key === "&#8942;" ? "&#8942;" : "[10, 30, 145, 170]"}}</td>
            <td>{{key === "&#8942;" ? "&#8942;" : "or"}}</td>
            <td :style='key === "&#8942;" ? "" : "text-align: left"'>{{key === "&#8942;" ? "&#8942;" : (key + (key === 1 ? " token" : " tokens") + " for sure")}}
            </td>
        </tr>
    </table>
    <br>

    <p><b>Please answer the following understanding questions:</b></p>

<div 
    v-for='(question, index) in app.s2questions' 
    style='display: flex; margin-bottom: 0.5rem;'
    :class='{ haserror: question.hasError }'
>
    <span style='width: 550px'>{{question.text}}</span>
    <span style='margin-right: 1.2rem;'>
        <input type='radio' :name='"s2q" + index' :id='"s2q" + index + "true"' value='true'>
        <label :for='"s2q" + index + "true"'>True</label>
    </span>
    <span>
        <input type='radio' :name='"s2q" + index' :id='"s2q" + index + "false"' value='false'>
        <label :for='"s2q" + index + "false"'>False</label>
    </span>
</div>

    <div class='haserror' id='errorMsg' v-show='player.hasErrors'>Please read the instructions again and check your answers.</div>

    <button type='button' onclick='checkAnswers("s2")'>Check answers</button>

    <br><br>
    <div>
    At which token value would you switch from Option A to Option B? 
    <input 
        type='text' 
        required 
        name='player.switchRow' 
        pattern='^([01]?[0-9]?[0-9]|200)' 
        style='width: 64px' 
        onchange="showSwitchVal(this.value)"
        onkeyup="showSwitchVal(this.value)"
        v-on:keydown.enter.prevent
        tabindex='-1'
        id='switchRow'
    > 
    tokens

    <br><br>
    <button type='button' onclick='gotoScreen("screen3")' :disabled='(player.hasErrors == null || player.hasErrors) || !(player.switchRow != "" && player.switchRow >= 1 && player.switchRow <= 200)'>OK</button>

</div>
<br>

</div>
`;

app.numRepsScreen3 = 2;
let screen3 = app.newStage('screen3');
screen3.activeScreen = `
<p>Period {{player.curPeriod}} / {{app.numRepsScreen3}}</p>

<p v-if='player.curPeriod==1'>In this round you will choose between the same option A and option B {{app.numRepsScreen3}} times in a row. Note that there are no right or wrong answers for any of the
questions.</p>

<p v-if='player.curPeriod==1'>If this round would be selected for payout in the real experiment, one of the {{app.numRepsScreen3}} questions would be randomly selected and you would be paid out according to your choice.</p>

<p>There are two options: option A and option B which you see below (each option is a lottery with 4 potential outcomes, each outcome being equally
likely). Which option do you prefer?</p>

<p>Please select option A or option B and click OK.</p>

<div style='display: flex; align-items: center; font-size: 24pt'>
<div style='flex: 1 0 auto; display: flex; align-items: center; flex-direction: column; justify-content: center; position: relative'>
        <div class='blocker'></div>
        <img class='choice' src='14anita/images/trainingA.jpg' width=600 onclick='selectOption(this)' data-optionletter='A'>
        Option A
    </div>
    <div style='width: 100px'></div>
    <div style='flex: 1 0 auto; display: flex; align-items: center; flex-direction: column; justify-content: center; position: relative'>
        <div class='blocker'></div>
        <img class='choice' src='14anita/images/trainingB.jpg' width=600 onclick='selectOption(this)' data-optionletter='B'>
        Option B
    </div>
</div>
<div style='margin-top: 6rem; height: 2rem; text-align: center'>
    <button tabindex='-1' v-show='player.allowOK' type='button' onclick='submitScreen3()'>OK</button>
</div>

<script>
submitScreen3 = function() {
    jt.vue.player.allowOK = false;
    if (jt.vue.player.curPeriod === 1) {
        Vue.set(jt.vue.player, 's3letters', '');
    }
    jt.vue.player.s3letters += jt.vue.player.s3curLetter;
    $('img').removeClass('selected');
    gotoScreen("s3Results");
}
selectOption = function(el) {
    jt.vue.player.s3curLetter = el.dataset.optionletter;
    $('img').removeClass('selected');
    el.classList.add('selected');

    if (!jt.vue.player.allowOK && jt.okTimer == null) {
        console.log('allow ok timer started');
        jt.okTimer = setTimeout(function() {
            console.log('allow ok timer ended');
            jt.vue.player.allowOK = true;
        },
        jt.vue.player.stage.app.okDelay);
    }
}
</script>
`;

let s3Results = app.newStage('s3Results');
s3Results.addOKButtonIfNone = false;
s3Results.activeScreen = `
<p>You chose:</p>
<div style='display: flex; align-items: center; font-size: 24pt'>
    <div style='flex: 1 0 auto; display: flex; align-items: center; flex-direction: column; justify-content: center; position: relative'>
        <img :src='"14anita/images/" + (player.s3curLetter === "A" ? "trainingA.jpg" : "trainingB.jpg")' width=600>
        Option {{ player.selectedOptionLetter }}
    </div>
</div>
`;

let screen4 = app.newStage('screen4');
screen4.activeScreen = `
<p>In the real experiment, there is a 50% chance that you will get to review the choices you made before. In this case, you will see the
following:</p>
<p>Previously you made {{app.numRepsScreen3}} consecutive choices between the following options:</p>
<div style='display: flex; align-items: center; font-size: 24pt'>
    <div style='flex: 1 1 auto; display: flex; flex-direction: column; justify-content: center; margin: 50px'>
        <img src='14anita/images/trainingA.jpg' width='600'>
        <p>Option A</p>
    </div>
    <div style='flex: 1 1 auto; display: flex; flex-direction: column; justify-content: center; margin: 50px'>
        <img src='14anita/images/trainingB.jpg' width='600'>
        <p>Option B</p>
    </div>
</div>

<span>Your choices were: <span style='font-size: 24pt'>{{player.s3letters}}</span></span>
<p>Below you have the option to revise your choices or to keep your choices the same. For example, if you click on "All A" ("All B") below, all previous choices for the {{app.numRepsScreen3}} questions you made will not be considered for payout but instead the computer will calculate payout as if you chose option A (option B) in all {{app.numRepsScreen3}} questions.</p>
<div>
    <button tabindex='-1' type='button' onclick='gotoScreen("finished")' v-show='player.s3letters !== "A".repeat(app.numRepsScreen3)'>All A</button>
    <button tabindex='-1' type='button' onclick='gotoScreen("finished")' v-show='player.s3letters !== "B".repeat(app.numRepsScreen3)'>All B</button>
    <button tabindex='-1' type='button' onclick='gotoScreen("finished")'>No changes</button>
</div>
`;

let finished = app.newStage('finished');
finished.activeScreen = `
    <p style='max-width: 600px'>You have finished the instructions. You may wait here until the experiment continues. If you like, you may redo the instructions by clicking "Restart instructions".</p>
    <button tabindex='-1' type='button' onclick='gotoScreen("screen1")'>Restart instructions</button>
`;
app.numPeriods = app.session.repsForBlock3*app.session.decisionSituations.length;
app.groupSize = 1;
app.pageDelay = 1000;
app.optionsDelay = 1000;
app.okDelay = 1000;

// Disable automatic modification of "src" attributes, instead the full path is pre-specified. Automation does not work with dynamic values yet.
app.modifyPathsToIncludeId = false;

app.html = `
<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv='Content-Type' content='text/html; charset=utf-8'>
        <meta name="viewport" content="width=device-width, initial-scale=1">
    </head>
    <body class='hidden'>
        <div id='jtree'>
            <span v-show='player.status=="playing"'>
                {{stages}}
            </span>
            <span v-show='["ready", "waiting", "finished", "done"].includes(player.status)'>
                {{waiting-screens}}
            </span>
        </div>
        {{scripts}}
    </body>
</html>
`;

app.initPlayer = function(player) {
    let sit = Math.floor((player.period().id-1)/app.session.repsForBlock3);
    let participant = player.participant;
    let situation = app.session.decisionSituations[participant.decSitSequence[sit]];
    player.situation = situation;
    player.situationName = situation.name;
    if (participant.decSitABSeq[sit] == 'AB') {
        player.left = player.situation.optionA;
        player.right = player.situation.optionB;
        player.left.letter = 'A';
        player.right.letter = 'B';
    } else {
        player.left = player.situation.optionB;
        player.right = player.situation.optionA;
        player.left.letter = 'B';
        player.right.letter = 'A';
    }
    player.leftText = player.left.text;
    player.rightText = player.right.text;
    player.selectedOption = -1;
    player.selectedOptionLetter = -1;
    if (player.period().id === 1) {
        player.participant.latestPayoffs = [];
    }

    player.curPeriod = player.period().id - Math.floor((player.period().id-1) / app.session.repsForBlock3)*app.session.repsForBlock3;
    player.allowOK = false;
}

let intro = app.newStage('intro');
intro.activeScreen = `
    <p>Please click OK to proceed to the next stage of the experiment.</p>
`;
intro.canPlayerParticipate = function(player) {
    app.initPlayer(player);
    if (player.period().id % app.session.repsForBlock3 === 1) {
        return true;
    } else {
        return false;
    }
}

let stage = app.newStage('hello');
stage.playerEnd = function(player) {
    player.participant.latestPayoffs.push({
        text: player.selectedOption,
        letter: player.selectedOptionLetter
    });
}

stage.activeScreen = `
<p>{{ app.periodText }}: {{player.curPeriod}}/{{app.session.repsForBlock3}}</p>
<p>Please select option A or option B and click OK.</p>
<div style='display: flex; align-items: center; font-size: 24pt'>
    <div style='flex: 1 1 auto; display: flex; align-items: center; flex-direction: column; justify-content: center'>
        <img :src='"14anita/images/" + player.left.filename' width=600 onclick='selectOption(this)' :data-optiontext='player.left.text' :data-optionletter='player.left.letter'>
        Option A
    </div>
    <div style='flex: 1 1 auto; display: flex; align-items: center; flex-direction: column; justify-content: center'>
        <img :src='"14anita/images/" + player.right.filename' width=600 onclick='selectOption(this)' :data-optiontext='player.right.text' :data-optionletter='player.right.letter'>
        Option B
    </div>
    <input id='choice' style='z-index: -10; position: absolute' name='player.selectedOption'>
    <input id='choiceLetter' style='z-index: -10; position: absolute' name='player.selectedOptionLetter'>
</div>
<div style='margin-top: 6rem; text-align: center'>
    <button :disabled='(player.selectedOption == -1 || !player.allowOK)'>OK</button>
</div>
<script>
jt.connected = function() {
    jt.socket.on('playerUpdate', function(player) {
        player = JSON.parse(player);
        if (player.stage.id === "intro") {
            return;
        }
        $('body').css('display', 'none');
        jt.allowSelect = false;
        player.allowOK = false;

        setTimeout(function() {
            $('body').css('display', 'block');
            setTimeout(function() {
                jt.allowSelect = true;
                setTimeout(function() {
                    jt.vue.player.allowOK = true;
                },
                player.stage.app.okDelay);
            },
            player.stage.app.optionsDelay);
        },
        player.stage.app.pageDelay);

        $('img').removeClass('selected');
    });
}
selectOption = function(el) {
    if (!jt.allowSelect) {
        return;
    }
    jt.vue.player.selectedOption = el.dataset.optiontext;
    jt.vue.player.selectedOptionLetter = el.dataset.optionletter;
    $('img').removeClass('selected');
    el.classList.add('selected');
    document.getElementById('choice').value = jt.vue.player.selectedOption;
    document.getElementById('choiceLetter').value = jt.vue.player.selectedOptionLetter;
}
</script>
<style>
img {
    border: 4px solid transparent;
    cursor: pointer;
}
img:hover {
    border: 4px solid rgba(0, 0, 255, 0.5);
}
.selected {
    border: 4px solid blue;
}
.selected:hover {
    border: 4px solid blue;
}
#jtree {
    min-width: unset;
}
body {
    max-width: unset;
}
</style>
` 

stage.autoplay = `
    $('body').css('display', 'block');
    jt.allowSelect = true;
    jt.vue.player.allowOK = true;
    if (jt.vue.player.selectedOption == -1) {
        Vue.nextTick(function() {
            selectOption($('img')[Math.random() < 0.5 ? 0 : 1]);
        });
    } else {
        $('form:visible').submit();
    }
`